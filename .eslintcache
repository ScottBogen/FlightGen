[{"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\index.js":"1","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\App.js":"2","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Toggle.js":"3","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\ResultsPage.js":"4","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\AirportList.ts":"5","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Airport.ts":"6","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\FlightForm.js":"7","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Header.js":"8","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Button.js":"9","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\AirportCard.js":"10","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\AirportService.js":"11","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Map.js":"12"},{"size":193,"mtime":1614039229861,"results":"13","hashOfConfig":"14"},{"size":3886,"mtime":1617600494121,"results":"15","hashOfConfig":"14"},{"size":641,"mtime":1613682917804,"results":"16","hashOfConfig":"14"},{"size":2038,"mtime":1617744642137,"results":"17","hashOfConfig":"14"},{"size":181,"mtime":1613692448663,"results":"18","hashOfConfig":"14"},{"size":1800,"mtime":1613692119707,"results":"19","hashOfConfig":"14"},{"size":3638,"mtime":1617688705990,"results":"20","hashOfConfig":"14"},{"size":471,"mtime":1614043439815,"results":"21","hashOfConfig":"14"},{"size":639,"mtime":1614168588201,"results":"22","hashOfConfig":"14"},{"size":1832,"mtime":1617745514156,"results":"23","hashOfConfig":"14"},{"size":1587,"mtime":1616347580319,"results":"24","hashOfConfig":"14"},{"size":1915,"mtime":1617741992382,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"uw7mcp",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\index.js",[],["56","57"],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\App.js",["58","59","60"],"import React from 'react'\nimport FlightForm from './FlightForm'\nimport ResultsPage from './ResultsPage'\nimport Header from './Header'\nimport AirportService from './AirportService'\nimport airports from './AirportList'\nimport Map from './Map'\nimport \"./App.css\"\n\n\n/* \n  Main page: FlightForm\n  When the form is successfully submitted, change this view to the results page, where values will be temporary until filled in by the response\n*/\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = { \n      formPage: true,\n      resultsPage: false,\n      userInputs: {\n        arrivalAirport: '',\n        departureAirport: '',\n        minRange: '',\n        maxRange: '',\n        allowsSmallAirports: false,\n        allowsMediumAirports: false,\n        allowsLargeAirports: false\n      }, \n      airports: [],\n      arrivalAirport: null,\n      departureAirport: null\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRandom = this.handleRandom.bind(this);\n    this.switchPages = this.switchPages.bind(this);\n  }\n\n  // it would be cleaner if I passed the type in addition to val and name, then type checked to see if type=\"checkbox\"\n  handleChange(value, name) {\n    let input = this.state.userInputs;\n    if (name.includes(\"allows\")) {\n      const cur = input[name];\n      input[name] = !cur;\n    }\n    else {\n      input[name] = value;  \n    }\n    this.setState({\n      input\n    });\n  }\n\n  handleSubmit(){ \n    // make call to axios\n    let inputs = this.state.userInputs;\n\n    AirportService.getAirports(inputs).then((response) => {  \n      var airports = response.data;\n\n      this.setState({\n        airports: airports\n      })\n\n      this.updateAirports(airports);\n      this.switchPages();\n    });\n  }\n\n  updateAirports(airports) {\n    const departure = airports[0];\n    const arrival = this.selectRandomAirport(departure);\n\n    this.setState({\n      arrivalAirport: arrival,\n      departureAirport: departure\n    });\n\n    console.log(\"State:\")\n    console.log(this.state);\n  }\n\n  selectRandomAirport(currAirport) {\n    console.log(\"Curr airport: \")\n    console.log(currAirport);\n    if (!currAirport || !this.state.airports) return null;\n    \n    const min = 1;\n    const max = this.state.airports.length;\n    const currIndex = this.state.airports.map(e => e.airportId).indexOf(currAirport.airportId);\n    console.log(\"min = \" + min + \" max = \" + max + \" curr = \" + currIndex);\n\n    \n    var randomInt = currIndex;\n    while (randomInt == currIndex) {\n        randomInt = Math.floor(Math.random() * (max - min) + min);\n    }\n\n    console.log(\"Random gen: \");\n    console.log(this.state.airports[randomInt]);\n    return this.state.airports[randomInt];\n  }\n\n  handleRandom(e) {\n    var originalArrival = this.state.arrivalAirport;\n    var newArrival = this.selectRandomAirport(originalArrival);\n    this.setState({\n        arrivalAirport: newArrival\n    });\n  }\n\n  switchPages() {\n    this.setState(prevState => ({\n      formPage: !prevState.formPage,\n      resultsPage: !prevState.resultsPage,\n\n      userInputs: {\n        allowsSmallAirports: false,\n        allowsMediumAirports: false,\n        allowsLargeAirports: false\n      }\n\n    }));\n  }\n\n  render () {\n    return (\n      <div>\n        <Header/>\n        {this.state.formPage && \n          <FlightForm \n            input={this.state.userInputs} \n            onChange={this.handleChange} \n            onSubmit={this.handleSubmit}/>\n        }\n        \n        {this.state.resultsPage && \n          <ResultsPage\n            onRandom={this.handleRandom} \n            onBack={this.switchPages}\n            airports={this.state.airports} \n            arrivalAirport={this.state.arrivalAirport} \n            departureAirport={this.state.departureAirport}\n          />\n        }\n\n      </div> \n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Toggle.js",[],["61","62"],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\ResultsPage.js",[],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\AirportList.ts",[],["63","64"],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Airport.ts",[],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\FlightForm.js",["65","66","67"],"import React from 'react'\r\nimport { Button, ButtonGroup, Col, Container, Form, Row } from 'react-bootstrap';\r\nimport MenuButton from './Button'\r\nimport AirportService from './AirportService'\r\n\r\nclass FlightForm extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validated: false,\r\n      selectedMethod: \"departure\"\r\n     }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.props.onChange(e.target.value, e.target.name);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onSubmit();\r\n  }\r\n  \r\n  render() {\r\n    const input = this.props.input; \r\n\r\n    const departureAirport = input.departureAirport; \r\n    const minRange = input.minRange;\r\n    const maxRange = input.maxRange;\r\n    const allowsSmallAirports = input.allowsSmallAirports;\r\n    const allowsMediumAirports = input.allowsMediumAirports;\r\n    const allowsLargeAirports = input.allowsLargeAirports;\r\n\r\n    return (\r\n      <div>\r\n          <Container>\r\n            <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\r\n              <Form.Group controlId=\"formAirportSelection\">\r\n\r\n              <Form.Label> <h4>Airport</h4></Form.Label>\r\n                <Form.Control \r\n                  type=\"text\" \r\n                  placeholder=\"e.g. KLAX or Los Angeles Intl.\" \r\n                  name=\"departureAirport\"\r\n                  value={departureAirport}\r\n                  onChange={this.handleChange}/>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formDistanceSelection\">\r\n                <Form.Label><h4>Distance  (in nautical miles)</h4></Form.Label>\r\n                <Row>\r\n                  <Col xs=\"3\">\r\n                    <Form.Label>Min</Form.Label>\r\n                    <Form.Control \r\n                      type=\"text\" \r\n                      // placeholder=\"0\"\r\n                      name=\"minRange\"\r\n                      value={minRange}\r\n                      onChange={this.handleChange} />\r\n                  </Col>\r\n\r\n                  <Col xs=\"3\">\r\n                    <Form.Label> Max</Form.Label>\r\n                    <Form.Control \r\n                      type=\"text\" \r\n                      // placeholder=\"500\"\r\n                      name=\"maxRange\"\r\n                      value={maxRange}\r\n                      onChange={this.handleChange} />\r\n                  </Col>\r\n                </Row>\r\n              </Form.Group>\r\n              \r\n              <Form.Group controlId=\"formAirportSizeSelection\">\r\n                <Form.Label><h4>Airport Size</h4></Form.Label>\r\n                <Form.Check \r\n                  type=\"checkbox\" \r\n                  label=\"Small\" \r\n                  name=\"allowsSmallAirports\"\r\n                  value={allowsSmallAirports} \r\n                  onChange={this.handleChange}/>\r\n\r\n                <Form.Check \r\n                  type=\"checkbox\" \r\n                  label=\"Medium\" \r\n                  name=\"allowsMediumAirports\"\r\n                  value={allowsMediumAirports}\r\n                  onChange={this.handleChange} />\r\n\r\n\r\n                <Form.Check \r\n                  type=\"checkbox\" \r\n                  label=\"Large\" \r\n                  name=\"allowsLargeAirports\"\r\n                  value={allowsLargeAirports}\r\n                  onChange={this.handleChange} />         \r\n                  \r\n              </Form.Group>\r\n\r\n              <Button type=\"submit\"> Generate Flight </Button>\r\n            </Form>\r\n          </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlightForm\r\n","C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Header.js",[],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Button.js",[],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\AirportCard.js",[],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\AirportService.js",[],"C:\\Users\\bogen\\Documents\\flightplanner frontend\\flight-planner\\src\\Map.js",["68"],"import React from 'react'\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet'\r\nimport './Map.css'\r\n\r\n/*  Notes:\r\n        We will need a map centered at the midpoint between Departing and Arriving\r\n        We will need two Markers -- one for departure one for arrival\r\n\r\n        So really, all we need to send in the props to this Map is the departure=[lat, long] and arrival=[lat, long]\r\n*/\r\n\r\nclass Map extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        const latIndex = 0;\r\n        const longIndex = 1;\r\n\r\n        // represented as lists [float, float]\r\n        const departureCoords = this.props.departureCoords;\r\n        const arrivalCoords = this.props.arrivalCoords;\r\n\r\n        const latitudalMidpoint = (departureCoords[latIndex] + arrivalCoords[latIndex]) / 2;\r\n        const longitudalMidpoint = (departureCoords[longIndex] + arrivalCoords[longIndex]) / 2;\r\n\r\n        const polylinePoints = [departureCoords, arrivalCoords];\r\n        const polyLineColor = {color: 'red'};\r\n\r\n        // this midpoint is for centering the view\r\n        const midpoint = [latitudalMidpoint, longitudalMidpoint];\r\n\r\n        return (\r\n            <div>\r\n                <MapContainer center={midpoint} zoom={6} scrollWheelZoom={false}>\r\n                    <TileLayer\r\n                        attribution='&copy; <a href=\"http:/`/osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    <Marker position={departureCoords} />\r\n                    <Marker position={arrivalCoords}  />\r\n\r\n                    <Polyline positions={polylinePoints} pathOptions={polyLineColor}/>\r\n\r\n                </MapContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map\r\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":16},{"ruleId":"73","severity":1,"message":"77","line":7,"column":8,"nodeType":"75","messageId":"76","endLine":7,"endColumn":11},{"ruleId":"78","severity":1,"message":"79","line":99,"column":22,"nodeType":"80","messageId":"81","endLine":99,"endColumn":24},{"ruleId":"69","replacedBy":"82"},{"ruleId":"71","replacedBy":"83"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"84","line":2,"column":18,"nodeType":"75","messageId":"76","endLine":2,"endColumn":29},{"ruleId":"73","severity":1,"message":"85","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":18},{"ruleId":"73","severity":1,"message":"86","line":4,"column":8,"nodeType":"75","messageId":"76","endLine":4,"endColumn":22},{"ruleId":"73","severity":1,"message":"87","line":2,"column":43,"nodeType":"75","messageId":"76","endLine":2,"endColumn":48},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'airports' is defined but never used.","Identifier","unusedVar","'Map' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["88"],["89"],"'ButtonGroup' is defined but never used.","'MenuButton' is defined but never used.","'AirportService' is defined but never used.","'Popup' is defined but never used.","no-global-assign","no-unsafe-negation"]